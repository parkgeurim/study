@charset "UTF-8";
/*
https://heropy.blog/2018/01/31/sass/
cd D:\sass
d:
scss --watch stylesheets:stylesheet/compiled

scss 파일을 css파일로 변환하면 map 파일이 생성된다.
map 파일을 생성하지 않게 하려면
--sourcemap=none

*/
/*
@at-root (중첩 벗어나기)
중첩 안에서 생성하되 중첩 밖에서 사용해야 하는 경우
*/
@import url(event.css);
@import url(hello.css);
@import "http://hello.com/hello";
@import url(hello);
@import "hello" screen;
.list li {
  width: 100px;
  height: 50px; }
.box {
  /*.box가 .list안에서 빠져나옴*/
  width: 100px;
  height: 50px; }

/*
font-, margin- 등과 같이 동일한 네임 스페이스를 가지는 속성들을 다음과 같이 사용할 수 있다.
*/
.list-box ul li {
  margin-top: 10px;
  margin-left: 20px;
  font-weight: 700;
  font-size: 32px;
  font-font-family: snas-serif;
  padding-bottom: 30px;
  padding-right: 10px; }

/*
	변수
	변수이름앞에 $을 붙여 사용

	- 변수 유효범위
	선언된 {} 내에서만 유효범위를 가진다.
*/
.list-box {
  width: 200px;
  margin-left: 200px;
  background: #f00 url("assets/images/bg.jpg"); }

.list-box {
  color: #00f;
  background: #f00; }

/*
	젼역설정
	!global 플래그를 사용하여 변수 전역으로 설정
*/
.global {
  background: #fff; }

.global_out {
  background: #fff; }

/*
!default (초기값 설정)
할당되지 않는 병수의 초기값을 설정
즉, 할당되어있는 변수가 있다면 변수가 기존 할당 값을 사용한다.

- 변수와 값을 설정하겠지만 ,혹시 기존 변수가 있을 경우는 현재 설정하는 변수의 값은 사용하지 않겠다는 의미로 사용할 수 있다.
- sass(scss) 라이브러리 (혹은 새롭게 만든 모듈)에서 사용하는 변수에 !default 플래그가 있다면 기존 코드를 overwrite 하지 않고도
사용할 수 있다. */
.default-box {
  background-color: red; }

.box {
  background: red; }

/*
가져오기 (import)

@import로 외부에서 가져온 sass 파일은 모두 단일 css파일로 병합된다.
또한 , 가져온 파일에 정의된 모든 변수 또는 mixins 등을 주 파일에서 사용할 수 있다.

sass @import는 기본적으로 sass 파일을 가져오는데, css @import 규칙으로 컴파일되는 몇 가지 상황도있다.
1. 파일 확장자가 .css 일때
2. 파일 이름이 http://로 시작하는 경우
3.url() 이 붙었을 경우
4.미디어뭐리가 있는 경우
*/
/*
파일 분활
- 파일 이름 앞에 _ 를 붙여 @import로 가져오면 컴파일 시 ~.css 파일로 컴파일 하지 않는다.

Sass-App
  # ...
  ├─scss
  │  ├─_header.scss
  │  ├─_side-menu.scss
  │  └─main.scss
  # ...

  컴파일 ...

  Sass-App
  # ...
  ├─css
  │  └─main.css  # main + header + side-menu
  ├─scss
  │  ├─header.scss
  │  ├─side-menu.scss
  │  └─main.scss
  # ...

  앞에 _를 붙인 _header.scss와 _side-menu.scss는 css로 컴파일 되지 않음
*/
/*
문자(Strings)

문자 연산에는 + 사용
첫 번째 피연산자에 따옴표가 붙어있다면 연산 결과를 따옴표로묶음,
반대로 첫번째 피연산자에 따옴표가 붙어있지 않다면 연산 결과도 따옴표를 처리하지 않음
*/
.strings::after {
  content: "Helloworld";
  flex-flow: row-reverse wrap; }

/*
// @if
/*@if (조건) {
	!* 조건이 참일 때 구문 *!
}
// @if @else
@if (조건) {
	!* 조건이 참일 때 구문 *!
} @else {
	!* 조건이 거짓일 때 구문 *!
}
// @if @else if
@if (조건1) {
	!* 조건1이 참일 때 구문 *!
} @else if (조건2) {
	!* 조건2가 참일 때 구문 *!
} @else {
	!* 모두 거짓일 때 구문 *!
}*/
body {
  width: 1000px;
  margin: 0 auto;
  color: green; }

.container {
  width: 1000px; }
  .container section {
    float: left;
    width: 30%;
    height: 300px;
    margin-left: 5%; }
    .container section:first-child {
      margin-left: 0;
      font-size: 24px;
      font-weight: 700;
      color: #F0AD4E;
      line-height: 5em; }

section:nth-child(2) {
  font-size: 18px;
  font-weight: 700;
  color: #00B3EE;
  line-height: 2em; }
section:nth-child(3) {
  font-size: 14px;
  font-weight: 400;
  color: #7A43B6;
  line-height: 1em; }

/*
인수(Arguments)
Mixin은 함수(Functions)처럼 인수(Arguments)를 가질 수 있다.
매개변수(Parameters)란 변수의 한 종류로, 제공되는 여러 데이터 중 하나를 가리키기 위해 사용된다.
제공되는 여러 데이터들을 전달인수(Arguments) 라고 부른다.
// SCSS
@mixin 믹스인이름($매개변수) {
  스타일;
}
@include 믹스인이름(인수);
// Sass
=믹스인이름($매개변수)
  스타일
+믹스인이름(인수)
*/
section:nth-child(2) {
  border: 2px dashed orange;
  box-sizing: border-box; }

section:nth-child(3) {
  border: 4px dotted green;
  box-sizing: border-box; }

/*
키워드 인수(Keyword Arguments)
Mixin에 전달할 인수를 입력할 때 명시적으로 키워드(변수)를 입력하여 작성할 수 있다.
별도의 인수 입력 순서를 필요로 하지 않아 편리하게 작성할 수 있다.
단, 작성하지 않은 인수가 적용될 수 있도록 기본값을 설정해 주는 것이 좋다.
@mixin 믹스인이름($매개변수A: 기본값, $매개변수B: 기본값) {
  스타일;
}
@include 믹스인이름($매개변수B: 인수);
*/
.quick_menu {
  width: 200px;
  background-color: #31708F;
  color: #fff;
  position: absolute;
  top: 300px;
  left: 200px; }

/*
가변 인수(Variable Arguments)
때때로 입력할 인수의 개수가 불확실한 경우가 있다.
그럴 경우 가변 인수를 사용할 수 있다.
가변 인수는 매개변수 뒤에 ...을 붙여줍니다.
@mixin 믹스인이름($매개변수...) {
  스타일;
}
@include 믹스인이름(인수A, 인수B, 인수C);
*/
.text_area {
  width: 100%;
  height: 150px;
  background: url("/images/a.png") no-repeat 10px 20px, url("/images/b.png") no-repeat, url("/images/c.png"); }

.text_area span:first-child {
  font-style: italic, bold, 18px, sans-serif;
  font-weight: 400;
  font-size: 16px;
  font-family: sans-serif; }
.text_area span:nth-child(2) {
  font-style: italic;
  font-weight: 400;
  font-size: 30px;
  font-family: sans-serif; }

/*
@content
선언된 Mixin에 @content이 포함되어 있다면 해당 부분에 원하는 스타일 블록 을 전달할 수 있다.
이 방식을 사용하여 기존 Mixin이 가지고 있는 기능에 선택자나 속성 등을 추가할 수 있다.
@mixin 믹스인이름() {
  스타일;
  @content;
}
@include 믹스인이름() {
  // 스타일 블록
  스타일;
}
*/
/*
확장(Extend)
특정 선택자가 다른 선택자의 모든 스타일을 가져야하는 경우가 종종 있습니다.
이럴 경우 선택자의 확장 기능을 사용할 수 있습니다.
다음 예제를 봅시다.
@extend 선택자;
*/
.btn, .btn-danger {
  padding: 10px;
  margin: 10px;
  background: blue; }

.btn-danger {
  background: red; }

/*
함수(Functions)
Mixin은 위에서 살펴본 대로 지정한 스타일(Style)을 반환하는 반면,
함수는 보통 연산된(Computed) 특정 값을 @return 지시어를 통해 반환합니다.
// Mixins
@mixin 믹스인이름($매개변수) {
  스타일;
}
// Functions
@function 함수이름($매개변수) {
  @return 값
}
*/
.box1 {
  background-color: pink;
  width: 83.3333333333px; }

.box2 {
  background-color: yellow;
  width: 1000px; }

.box3 {
  background-color: #333;
  width: 66.6666666667px; }

/*
if (함수)
조건의 값(true, false)에 따라 두 개의 표현식 중 하나만 반환합니다.
if(조건, 표현식1, 표현식2)
조건의 값이 true이면 표현식1을,
조건의 값이 false이면 표현식2를 실행합니다.
*/
.box2 {
  width: 600px;
  height: 300px;
  background-color: red; }

/*// @if
@if (조건) {
	!* 조건이 참일 때 구문 *!
}
// @if @else
@if (조건) {
	!* 조건이 참일 때 구문 *!
} @else {
	!* 조건이 거짓일 때 구문 *!
}
// @if @else if
@if (조건1) {
	!* 조건1이 참일 때 구문 *!
} @else if (조건2) {
	!* 조건2가 참일 때 구문 *!
} @else {
	!* 모두 거짓일 때 구문 *!
}*/
body {
  width: 1000px;
  margin: 0 auto;
  color: green; }

div {
  width: 50px;
  height: 100px; }

.box1 {
  width: 20px;
  height: 20px;
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  margin: auto; }

.box2 {
  width: 50px;
  height: 100px;
  position: fixed;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  margin: auto; }

/*
@for
@for는 스타일을 반복적으로 출력합니다.
for 문과 유사합니다.
@for는 through를 사용하는 형식과 to를 사용하는 형식으로 나뉩니다.
두 형식은 종료 조건이 해석되는 방식이 다릅니다.
// through
// 종료 만큼 반복
@for $변수 from 시작 through 종료 {
  // 반복 내용
}
// to
// 종료 직전까지 반복
@for $변수 from 시작 to 종료 {
  // 반복 내용
}
*/
.through:nth-child(1) {
  width: 20px; }

.through:nth-child(2) {
  width: 40px; }

.through:nth-child(3) {
  width: 60px; }

.to:nth-child(1) {
  width: 20px; }

.to:nth-child(2) {
  width: 40px; }

/*
@each
@each는 List와 Map 데이터를 반복할 때 사용합니다.
for in 문과 유사합니다.

@each $변수 in 데이터 {
	//반복내용
}
*/
.fruits li.apple {
  background: url("/img/apple.png"); }
.fruits li.banana {
  background: url("/img/banana.png"); }
.fruits li.mango {
  background: url("/img/mango.png"); }
.fruits li.strawberry {
  background: url("/img/strawberry.png"); }

.fruits {
  width: 100px;
  height: 100px;
  background-color: #00B3EE; }
  .fruits li:nth-child(1) {
    left: 50px; }
  .fruits li:nth-child(2) {
    left: 100px; }
  .fruits li:nth-child(3) {
    left: 150px; }
  .fruits li:nth-child(4) {
    left: 200px; }

.box-apple {
  background: url("/images/korea.jpg"); }

.box-orange {
  background: url("/images/china.jpg"); }

.box-banana {
  background: url("/images/japan.jpg"); }

/*

Map 데이터를 반복할 경우 하나의 데이터에 두 개의 변수가 필요

@each $key변수, $value변수 in 데이터 {
  // 반복 내용
}
*/
.box-apple {
  background: url("/images/korea.png"); }

.box-orange {
  background: url("/images/china.png"); }

.box-banana {
  background: url("/images/japan.png"); }

/*
while

@while은 조건이 false로 평가될 때까지 내용을 반복
 while문과 유사하게 잘못된 조건으로 인해 컴파일 중 무한루프에 빠질 수 있다.(권장사용X)


 @while 조건 {
  // 반복 내용
}

*/
/*
animation

*/
@-webkit-keyframes pulsate {
  from {
    width: 1px;
    height: 1px;
    margin: 0;
    opacity: 1; }
  to {
    width: 50px;
    height: 50px;
    margin: -25px;
    opacity: 0; } }
@-moz-keyframes pulsate {
  from {
    width: 1px;
    height: 1px;
    margin: 0;
    opacity: 1; }
  to {
    width: 50px;
    height: 50px;
    margin: -25px;
    opacity: 0; } }
@-o-keyframes pulsate {
  from {
    width: 1px;
    height: 1px;
    margin: 0;
    opacity: 1; }
  to {
    width: 50px;
    height: 50px;
    margin: -25px;
    opacity: 0; } }
@keyframes pulsate {
  from {
    width: 1px;
    height: 1px;
    margin: 0;
    opacity: 1; }
  to {
    width: 50px;
    height: 50px;
    margin: -25px;
    opacity: 0; } }
#pulsate {
  -webkit-animation-duration: 0.6s;
  -moz-animation-duration: 0.6s;
  -o-animation-duration: 0.6s;
  animation-duration: 0.6s;
  -webkit-animation-iteration-count: infinite;
  -moz-animation-iteration-count: infinite;
  -o-animation-iteration-count: infinite;
  animation-iteration-count: infinite;
  -webkit-animation-name: pulsate;
  -moz-animation-name: pulsate;
  -o-animation-name: pulsate;
  animation-name: pulsate;
  -webkit-animation-direction: normal;
  -moz-animation-direction: normal;
  -o-animation-direction: normal;
  animation-direction: normal;
  border: 5px solid #000;
  border-radius: 50px;
  position: absolute;
  left: 50%;
  top: 50%; }

/*
import
@import "path/filename"


확장자 없이 가져오기
@import "inc"

확장자 없이 이름만 가져오기를 하면 네가지 파일이 있는지 검색하여 가져옴
inc.scss
inc.sass
_inc.scss
_inc.sass


*/

/*# sourceMappingURL=event2.css.map */
