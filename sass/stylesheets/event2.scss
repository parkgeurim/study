
@charset "utf-8";
/*
https://heropy.blog/2018/01/31/sass/

cd D:\sass
d:
scss --watch stylesheets:stylesheet/compiled

*/

// @if
/*@if (조건) {
	!* 조건이 참일 때 구문 *!
}

// @if @else
@if (조건) {
	!* 조건이 참일 때 구문 *!
} @else {
	!* 조건이 거짓일 때 구문 *!
}

// @if @else if
@if (조건1) {
	!* 조건1이 참일 때 구문 *!
} @else if (조건2) {
	!* 조건2가 참일 때 구문 *!
} @else {
	!* 모두 거짓일 때 구문 *!
}*/

$color: green;
body {
	width:1000px;
	margin:0 auto;
	@if $color == strawberry {
		color: #FE2E2E;
	} @else if $color == green {
		color: green;
	} @else if $color == banana {
		color: #FFFF00;
	} @else {
		color: #2A1B0A;
	}
}


@mixin large-text {

	font: {
		size:24px;
		weight:700;
	}
	color:#F0AD4E;
	line-height:5em;
}

@mixin medium-text {

	font: {
		size:18px;
		weight:700;
	}
	color:#00B3EE;
	line-height:2em;
}

@mixin small-text {

	font: {
		size:14px;
		weight:400;
	}
	color:#7A43B6;
	line-height:1em;

}

.container{width:1000px;
	section{
		float:left;
		width:30%;
		height:300px;
		margin-left:5%;
		&:first-child {
			margin-left:0;
			@include large-text;
		}
	}

}

section{
	&:nth-child(2) {
		@include medium-text;
	}
	&:nth-child(3) {
		@include small-text;
	}

}

/*
인수(Arguments)
Mixin은 함수(Functions)처럼 인수(Arguments)를 가질 수 있다.
매개변수(Parameters)란 변수의 한 종류로, 제공되는 여러 데이터 중 하나를 가리키기 위해 사용된다.
제공되는 여러 데이터들을 전달인수(Arguments) 라고 부른다.


// SCSS
@mixin 믹스인이름($매개변수) {
  스타일;
}
@include 믹스인이름(인수);

// Sass
=믹스인이름($매개변수)
  스타일

+믹스인이름(인수)

*/


@mixin dash-line ($width, $color) {
	border:$width dashed $color;
	box-sizing:border-box;
}

@mixin dotted-line ($width, $color) {
	border:$width dotted $color;
	box-sizing:border-box;
}


section{

	&:nth-child(2) {
		@include dash-line(2px,orange)
	}
}

section{

	&:nth-child(3){
		@include dotted-line(4px,green)
	}
}


/*
키워드 인수(Keyword Arguments)

Mixin에 전달할 인수를 입력할 때 명시적으로 키워드(변수)를 입력하여 작성할 수 있다.
별도의 인수 입력 순서를 필요로 하지 않아 편리하게 작성할 수 있다.
단, 작성하지 않은 인수가 적용될 수 있도록 기본값을 설정해 주는 것이 좋다.


@mixin 믹스인이름($매개변수A: 기본값, $매개변수B: 기본값) {
  스타일;
}

@include 믹스인이름($매개변수B: 인수);
*/


@mixin position(
	$p : null,
	$t : null,
	$b : null,
	$l : null,
	$r : null
) {
	position:$p;
	top:$t;
	bottom:$b;
	left:$l;
	right:$r;
}

.quick_menu {
	width:200px;
	background-color:#31708F;
	color:#fff;

	@include position(absolute,$t: 300px, $l: 200px);
}


/*
가변 인수(Variable Arguments)

때때로 입력할 인수의 개수가 불확실한 경우가 있다.
그럴 경우 가변 인수를 사용할 수 있다.
가변 인수는 매개변수 뒤에 ...을 붙여줍니다.


@mixin 믹스인이름($매개변수...) {
  스타일;
}

@include 믹스인이름(인수A, 인수B, 인수C);
*/

@mixin bg($width, $height, $bg-values...){
	width:$width;
	height:$height;
	background:$bg-values;
}

.text_area {
	@include bg(
			100%,
			150px,
			url("/images/a.png") no-repeat 10px 20px,
			url("/images/b.png") no-repeat,
			url("/images/c.png")
	);
}

// 가변 인수를 전달값으로 사용


@mixin font-sty (
	$style : normal,
	$weight : 400,
	$size : 16px,
	$family : sans-serif
){
	font : {
		style : $style;
		weight : $weight;
		size : $size;
		family : $family;
	}
}

.text_area{
	span:first-child{
		// 매개변수 순서와 개수에 맞게 전달
		$font-value1:italic, bold, 18px, sans-serif;
		@include font-sty ($font-value1);
	}
	span:nth-child(2) {
		// 필요한 값만 키워드 인수로 변수에 담아 전달
		// 생략되는 부분이 있을 경우 ... 입력, 미입력시 에러남

		$font-value2:(style : italic, size:30px);
		@include font-sty($font-value2...);
	}
	span:nth-child(3) {
		// 필요한 값만 키워드 인수로 전달
		@include font-sty((weight:100, size:50px)...);
	}
}

/*
@content

선언된 Mixin에 @content이 포함되어 있다면 해당 부분에 원하는 스타일 블록 을 전달할 수 있다.
이 방식을 사용하여 기존 Mixin이 가지고 있는 기능에 선택자나 속성 등을 추가할 수 있다.

@mixin 믹스인이름() {
  스타일;
  @content;
}

@include 믹스인이름() {
  // 스타일 블록
  스타일;
}

*/

/*
확장(Extend)
특정 선택자가 다른 선택자의 모든 스타일을 가져야하는 경우가 종종 있습니다.
이럴 경우 선택자의 확장 기능을 사용할 수 있습니다.
다음 예제를 봅시다.

@extend 선택자;
*/

.btn {
	padding: 10px;
	margin: 10px;
	background: blue;
}
.btn-danger {
	@extend .btn;
	background: red;
}

/*
함수(Functions)
Mixin은 위에서 살펴본 대로 지정한 스타일(Style)을 반환하는 반면,
함수는 보통 연산된(Computed) 특정 값을 @return 지시어를 통해 반환합니다.


// Mixins
@mixin 믹스인이름($매개변수) {
  스타일;
}

// Functions
@function 함수이름($매개변수) {
  @return 값
}
*/


$max-width : 1000px;

@function colWidth ($num : 1, $columns:12) {
	@return $max-width * ($num / $columns)
}

.box1 {
	background-color:pink;
	width:colWidth();
}
.box2 {
	background-color:yellow;
	width:colWidth(12);
}
.box3 {
	background-color:#333;
	width:colWidth(0.8);
}


/*
if (함수)
조건의 값(true, false)에 따라 두 개의 표현식 중 하나만 반환합니다.


if(조건, 표현식1, 표현식2)

조건의 값이 true이면 표현식1을,
조건의 값이 false이면 표현식2를 실행합니다.
*/


$width:600px;

.box2 {
	width : if($width > 300px, $width, null);
	height: 300px;
	background-color:red;

}



/*// @if
@if (조건) {
	!* 조건이 참일 때 구문 *!
}

// @if @else
@if (조건) {
	!* 조건이 참일 때 구문 *!
} @else {
	!* 조건이 거짓일 때 구문 *!
}

// @if @else if
@if (조건1) {
	!* 조건1이 참일 때 구문 *!
} @else if (조건2) {
	!* 조건2가 참일 때 구문 *!
} @else {
	!* 모두 거짓일 때 구문 *!
}*/


$color: green;
body {
	width:1000px;
	margin:0 auto;
	@if $color == strawberry {
		color: #FE2E2E;
	} @else if $color == green {
		color: green;
	} @else if $color == banana {
		color: #FFFF00;
	} @else {
		color: #2A1B0A;
	}
}

// 조건에는 논리 연산자 and, or, not을 사용할 수 있다.

@function limitSize($size){
	@if $size >= 0 and $size <=100px {
		@return 50px;
	} @else {
		@return 100px;
	}
}


div {
	width:limitSize(80px);
	height:limitSize(400px);
}

@mixin pCenter($w, $h, $p: absolute) {
	@if
	$p == absolute
    or $p == fixed
    or not $p == relative
    or not $p == static
	{
		width: if(unitless($w), #{$w}px, $w);
		height: if(unitless($h), #{$h}px, $h);
		position: $p;
		top: 0;
		bottom: 0;
		left: 0;
		right: 0;
		margin: auto;
	}
}

.box1 {
	@include pCenter(20px, 20px);
}
.box2 {
	@include pCenter(50, 100, fixed);
}
.box3 {
	@include pCenter(5,1300px, relative);
}

/*
@for

@for는 스타일을 반복적으로 출력합니다.
for 문과 유사합니다.

@for는 through를 사용하는 형식과 to를 사용하는 형식으로 나뉩니다.
두 형식은 종료 조건이 해석되는 방식이 다릅니다.


// through
// 종료 만큼 반복
@for $변수 from 시작 through 종료 {
  // 반복 내용
}

// to
// 종료 직전까지 반복
@for $변수 from 시작 to 종료 {
  // 반복 내용
}

*/

@for $i from 1 through 3 {
	.through:nth-child(#{$i}) {
	width : 20px * $i
	}
}

@for $i from 1 to 3 {
	.to:nth-child(#{$i}){
		width:20px*$i
	}
}



/*
@each

@each는 List와 Map 데이터를 반복할 때 사용합니다.
for in 문과 유사합니다.

@each $변수 i 데이터 {
	//반복내용
}
*/

$fruits : (apple,banana,mango,strawberry);

.fruits {
	@each $fruits in $fruits {
		li.#{$fruits} {
			background:url("/img/#{$fruits}.png");
		}
	}
}


// index값이 필요할때
.fruits {
	@each $fruit in $fruits {
		$i:index($fruits, $fruit);
		li:nth-child(#{$i}) {
			left: 50px * $i;
		}
	}
	width:100px;
	height:100px;
	background-color:#00B3EE;
}

