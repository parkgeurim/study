@charset "UTF-8";
/*
https://heropy.blog/2018/01/31/sass/

cd D:\sass
d:
scss --watch stylesheets:stylesheet/compiled

*/
/* 조건이 참일 때 구문 */
/* 조건이 참일 때 구문 */
/* 조건1이 참일 때 구문 */
body {
  width: 1000px;
  margin: 0 auto;
  color: green; }

.container {
  width: 1000px; }
  .container section {
    float: left;
    width: 30%;
    height: 300px;
    margin-left: 5%; }
    .container section:first-child {
      margin-left: 0;
      font-size: 24px;
      font-weight: 700;
      color: #F0AD4E;
      line-height: 5em; }

section:nth-child(2) {
  font-size: 18px;
  font-weight: 700;
  color: #00B3EE;
  line-height: 2em; }
section:nth-child(3) {
  font-size: 14px;
  font-weight: 400;
  color: #7A43B6;
  line-height: 1em; }

/*
인수(Arguments)
Mixin은 함수(Functions)처럼 인수(Arguments)를 가질 수 있다.
매개변수(Parameters)란 변수의 한 종류로, 제공되는 여러 데이터 중 하나를 가리키기 위해 사용된다.
제공되는 여러 데이터들을 전달인수(Arguments) 라고 부른다.


// SCSS
@mixin 믹스인이름($매개변수) {
  스타일;
}
@include 믹스인이름(인수);

// Sass
=믹스인이름($매개변수)
  스타일

+믹스인이름(인수)

*/
section:nth-child(2) {
  border: 2px dashed orange;
  box-sizing: border-box; }

section:nth-child(3) {
  border: 4px dotted green;
  box-sizing: border-box; }

/*
키워드 인수(Keyword Arguments)

Mixin에 전달할 인수를 입력할 때 명시적으로 키워드(변수)를 입력하여 작성할 수 있다.
별도의 인수 입력 순서를 필요로 하지 않아 편리하게 작성할 수 있다.
단, 작성하지 않은 인수가 적용될 수 있도록 기본값을 설정해 주는 것이 좋다.


@mixin 믹스인이름($매개변수A: 기본값, $매개변수B: 기본값) {
  스타일;
}

@include 믹스인이름($매개변수B: 인수);
*/
.quick_menu {
  width: 200px;
  background-color: #31708F;
  color: #fff;
  position: absolute;
  top: 300px;
  left: 200px; }

/*
가변 인수(Variable Arguments)

때때로 입력할 인수의 개수가 불확실한 경우가 있다.
그럴 경우 가변 인수를 사용할 수 있다.
가변 인수는 매개변수 뒤에 ...을 붙여줍니다.


@mixin 믹스인이름($매개변수...) {
  스타일;
}

@include 믹스인이름(인수A, 인수B, 인수C);
*/
.text_area {
  width: 100%;
  height: 150px;
  background: url("/images/a.png") no-repeat 10px 20px, url("/images/b.png") no-repeat, url("/images/c.png"); }

.text_area span:first-child {
  font-style: italic, bold, 18px, sans-serif;
  font-weight: 400;
  font-size: 16px;
  font-family: sans-serif; }
.text_area span:nth-child(2) {
  font-style: italic;
  font-weight: 400;
  font-size: 30px;
  font-family: sans-serif; }
.text_area span:nth-child(3) {
  font-style: normal;
  font-weight: 100;
  font-size: 50px;
  font-family: sans-serif; }

/*
@content

선언된 Mixin에 @content이 포함되어 있다면 해당 부분에 원하는 스타일 블록 을 전달할 수 있다.
이 방식을 사용하여 기존 Mixin이 가지고 있는 기능에 선택자나 속성 등을 추가할 수 있다.

@mixin 믹스인이름() {
  스타일;
  @content;
}

@include 믹스인이름() {
  // 스타일 블록
  스타일;
}

*/
/*
확장(Extend)
특정 선택자가 다른 선택자의 모든 스타일을 가져야하는 경우가 종종 있습니다.
이럴 경우 선택자의 확장 기능을 사용할 수 있습니다.
다음 예제를 봅시다.

@extend 선택자;
*/
.btn, .btn-danger {
  padding: 10px;
  margin: 10px;
  background: blue; }

.btn-danger {
  background: red; }

/*
함수(Functions)
Mixin은 위에서 살펴본 대로 지정한 스타일(Style)을 반환하는 반면,
함수는 보통 연산된(Computed) 특정 값을 @return 지시어를 통해 반환합니다.


// Mixins
@mixin 믹스인이름($매개변수) {
  스타일;
}

// Functions
@function 함수이름($매개변수) {
  @return 값
}
*/
.box1 {
  background-color: pink;
  width: 83.3333333333px; }

.box2 {
  background-color: yellow;
  width: 1000px; }

.box3 {
  background-color: #333;
  width: 66.6666666667px; }

/*
if (함수)
조건의 값(true, false)에 따라 두 개의 표현식 중 하나만 반환합니다.


if(조건, 표현식1, 표현식2)

조건의 값이 true이면 표현식1을,
조건의 값이 false이면 표현식2를 실행합니다.
*/
.box2 {
  width: 600px; }

/* 조건이 참일 때 구문 */
/* 조건이 참일 때 구문 */
/* 조건1이 참일 때 구문 */
body {
  width: 1000px;
  margin: 0 auto;
  color: green; }

div {
  width: 50px;
  height: 100px; }

.box1 {
  width: 20px;
  height: 20px;
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  margin: auto; }

.box2 {
  width: 50px;
  height: 100px;
  position: fixed;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  margin: auto; }

/*
@for

@for는 스타일을 반복적으로 출력합니다.
for 문과 유사합니다.

@for는 through를 사용하는 형식과 to를 사용하는 형식으로 나뉩니다.
두 형식은 종료 조건이 해석되는 방식이 다릅니다.


// through
// 종료 만큼 반복
@for $변수 from 시작 through 종료 {
  // 반복 내용
}

// to
// 종료 직전까지 반복
@for $변수 from 시작 to 종료 {
  // 반복 내용
}

*/
.through:nth-child(1) {
  width: 20px; }

.through:nth-child(2) {
  width: 40px; }

.through:nth-child(3) {
  width: 60px; }

.to:nth-child(1) {
  width: 20px; }

.to:nth-child(2) {
  width: 40px; }

/*
@each

@each는 List와 Map 데이터를 반복할 때 사용합니다.
for in 문과 유사합니다.

@each $변수 i 데이터 {
	//반복내용
}
*/
.fruits li.apple {
  background: url("/img/apple.png"); }
.fruits li.banana {
  background: url("/img/banana.png"); }
.fruits li.mango {
  background: url("/img/mango.png"); }
.fruits li.strawberry {
  background: url("/img/strawberry.png"); }

.fruits li:nth-child(1) {
  left: 50px; }
.fruits li:nth-child(2) {
  left: 100px; }
.fruits li:nth-child(3) {
  left: 150px; }
.fruits li:nth-child(4) {
  left: 200px; }

/*# sourceMappingURL=event2.css.map */
